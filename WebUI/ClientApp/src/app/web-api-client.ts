//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IJobVacanciesClient {
    creaeNewJobVacancy(request: CreateJobVacancyCommand): Observable<number>;
    update(id: number, request: UpdateJobVacancyCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class JobVacanciesClient implements IJobVacanciesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    creaeNewJobVacancy(request: CreateJobVacancyCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/JobVacancies";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreaeNewJobVacancy(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreaeNewJobVacancy(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreaeNewJobVacancy(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(id: number, request: UpdateJobVacancyCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/JobVacancies/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class CreateJobVacancyCommand implements ICreateJobVacancyCommand {
    title?: string | undefined;
    shortDescription?: string | undefined;
    description?: string | undefined;
    publishDate?: Date;
    endDate?: Date;
    categoryId?: number;
    requiredYearOfExperience?: number;
    salary?: number;
    workSchedule?: number;

    constructor(data?: ICreateJobVacancyCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.shortDescription = _data["shortDescription"];
            this.description = _data["description"];
            this.publishDate = _data["publishDate"] ? new Date(_data["publishDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.categoryId = _data["categoryId"];
            this.requiredYearOfExperience = _data["requiredYearOfExperience"];
            this.salary = _data["salary"];
            this.workSchedule = _data["workSchedule"];
        }
    }

    static fromJS(data: any): CreateJobVacancyCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateJobVacancyCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["shortDescription"] = this.shortDescription;
        data["description"] = this.description;
        data["publishDate"] = this.publishDate ? this.publishDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["categoryId"] = this.categoryId;
        data["requiredYearOfExperience"] = this.requiredYearOfExperience;
        data["salary"] = this.salary;
        data["workSchedule"] = this.workSchedule;
        return data;
    }
}

export interface ICreateJobVacancyCommand {
    title?: string | undefined;
    shortDescription?: string | undefined;
    description?: string | undefined;
    publishDate?: Date;
    endDate?: Date;
    categoryId?: number;
    requiredYearOfExperience?: number;
    salary?: number;
    workSchedule?: number;
}

export class UpdateJobVacancyCommand implements IUpdateJobVacancyCommand {
    id?: number;
    title?: string | undefined;
    shortDescription?: string | undefined;
    description?: string | undefined;
    publishDate?: Date;
    endDate?: Date;
    categoryId?: number;
    requiredYearOfExperience?: number;
    salary?: number;
    workSchedule?: number;

    constructor(data?: IUpdateJobVacancyCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.shortDescription = _data["shortDescription"];
            this.description = _data["description"];
            this.publishDate = _data["publishDate"] ? new Date(_data["publishDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.categoryId = _data["categoryId"];
            this.requiredYearOfExperience = _data["requiredYearOfExperience"];
            this.salary = _data["salary"];
            this.workSchedule = _data["workSchedule"];
        }
    }

    static fromJS(data: any): UpdateJobVacancyCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateJobVacancyCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["shortDescription"] = this.shortDescription;
        data["description"] = this.description;
        data["publishDate"] = this.publishDate ? this.publishDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["categoryId"] = this.categoryId;
        data["requiredYearOfExperience"] = this.requiredYearOfExperience;
        data["salary"] = this.salary;
        data["workSchedule"] = this.workSchedule;
        return data;
    }
}

export interface IUpdateJobVacancyCommand {
    id?: number;
    title?: string | undefined;
    shortDescription?: string | undefined;
    description?: string | undefined;
    publishDate?: Date;
    endDate?: Date;
    categoryId?: number;
    requiredYearOfExperience?: number;
    salary?: number;
    workSchedule?: number;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}