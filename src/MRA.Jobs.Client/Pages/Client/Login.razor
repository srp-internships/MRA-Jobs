@page "/Login"
@using MRA.Jobs.Client.Services.AuthService;
@using MRA.Jobs.Infrastructure.Shared.Auth.Commands;
@layout Main

@inject IAuthService AuthServise
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container">
	<div class="form col-6 p-4 mx-auto rounded">
		<div class="d-flex flex-column">

			<div class="form-label-group mb-3">
				<input class="form-control form-control-lg"
					   type="text"
					   placeholder="login"
					   aria-label="login"
				@bind="email">
			</div>

			<div class="form-label-group mb-3">
				<input class="form-control form-control-lg"
					   type="password" placeholder="password"
					   aria-label="password"
				@bind="password">
			</div>

			<div class="checkbox mb-3">
				<label>
					<input type="checkbox" value="remember-me"> Remember me
				</label>
			</div>

			<button class="btn btn-primary" type="submit" @onclick="HandleLogin">Login</button>

		</div>
	</div>
</div>

@code {
	private string email;
	private string password;

	private async Task HandleLogin()
	{

		var result = await AuthServise.Login(email, password);
		if (result != null)
		{
			await LocalStorageService.SaveStringAsync("AccessToken", result.AccessToken);
			await LocalStorageService.SaveStringAsync("RefreshToken", result.RefreshToken);
			await LocalStorageService.SaveStringAsync("RefreshTokenValidTo", result.RefreshTokenValidTo.ToString());
			await AuthenticationStateProvider.GetAuthenticationStateAsync();
			
			NavigationManager.NavigateTo("vacancies");
		}
	}
}