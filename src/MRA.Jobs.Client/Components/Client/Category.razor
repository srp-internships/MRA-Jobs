@using MRA.Jobs.Application.Contracts.VacancyCategories.Responses
@using MRA.Jobs.Application.Contracts.Vacncies.Responses;

@inject IVacancyService VacancyService


@*<!--- Category -->
<section id="category">
    <div class="w-100">
        <h4 class="mb-2 text-dark">Category</h4>
        @if (_categoryResponses is null)
        {
            <div></div>   
        }
        else
        {
            <ul class="d-flex flex-column">
                @foreach (var category in CategoryService.Category)
                {
                    <li class="p-2 m-2 d-flex">@category.Name</li>
                }
            </ul>
        }
    </div>
</section>*@

<h1>Категории</h1>

<ul class="list-group">
	<li class="list-group-item d-flex justify-content-between align-items-center">
		Все категории
		<span class="badge bg-primary rounded-pill">@totalVacancyCount</span>
	</li>
	@foreach (var category in categories)
	{
		<li class="list-group-item d-flex justify-content-between align-items-center">
			@category.CategoryName
			<span class="badge bg-primary rounded-pill">@category.VacancyCount</span>
		</li>
	}
</ul>

@code {

    //private  List<CategoryResponse> _categoryResponses;
    //protected override async Task OnInitializedAsync()
    //{
    //    _categoryResponses = await CategoryService.GetAllCategory();
    //}
    
	private List<CategoryVacancyCountDTO> categories;
	private int totalVacancyCount;
	protected override async Task OnInitializedAsync()
	{
		categories = await VacancyService.GetCategories();
		totalVacancyCount = categories.Sum(c => c.VacancyCount);
	}
}
